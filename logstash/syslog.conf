input {
  lumberjack {
    port => 5004
    type => "logs"
    ssl_certificate => "/usr/local/d8o/data/certs/logstash-forwarder.crt"
    ssl_key => "/usr/local/d8o/data/private/logstash-forwarder.key"
  }
}

filter {
  if [type] == "syslog" {

    grok {
      patterns_dir => "/usr/local/d8o/docker-elk/patterns"
      match => {
        "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}:line %{NONNEGINT:linenumber}(?:\[%{POSINT:syslog_pid}\])?(?:\s\[%{LOGLEVEL:loglevel}\])?: (?<module>[^\s]+) - STARTRABBIT:%{DATA:queue};CORRELATION_ID:%{UUID:correlation_id}"
      }
      add_tag => ["rabbitStarted", "elapsedTest"]
      add_field => ["rabbit_queried", "%{queue}"]
      remove_field => ["queue"]
    }


    if !("rabbitStarted" in [tags]) {
        grok {
        patterns_dir => "/usr/local/d8o/docker-elk/patterns"
        match => {
            "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}:line %{NONNEGINT:linenumber}(?:\[%{POSINT:syslog_pid}\])?(?:\s\[%{LOGLEVEL:loglevel}\])?: (?<module>[^\s]+) - STOPRABBIT:%{DATA:queue};CORRELATION_ID:%{UUID:correlation_id}"
        }
        add_tag => ["rabbitFinished", "elapsedTest"]
        add_field => ["rabbit_responded", "%{queue}"]
        remove_field => ["queue"]
        remove_tag => ["_grokparsefailure"]
        }
    }
    if !("elapsedTest" in [tags]) {

        grok {
        patterns_dir => "/usr/local/d8o/docker-elk/patterns"
        match => {
            "message" => "%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}:line %{NONNEGINT:linenumber}(?:\[%{POSINT:syslog_pid}\])?(?:\s\[%{LOGLEVEL:loglevel}\])?: (?<module>[^\s]+) - %{GREEDYDATA:syslog_message}"
        }
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
        remove_tag => ["_grokparsefailure"]
        }
        syslog_pri { }
    }
        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
        }
    elapsed {
        start_tag => "rabbitStarted"
        end_tag => "rabbitFinished"
        unique_id_field => "correlation_id"
        timeout => 300 
    }
  }
  if [type] == "api" {
    grok {
        patterns_dir => "/usr/local/d8o/docker-elk/patterns"
        match => {
            "message" => '%{LOGLEVEL:loglevel}:%{WORD:program}:%{IPORHOST:host}\s-\s-\s\[%{FLASKDATE:flaskdate}\]\s%{QUOTEDSTRING:request}\s%{NONNEGINT:status}%{GREEDYDATA}'
        }
    }
    date {
        match => ["flaskdate", "dd/MMM/YYYY HH:mm:ss"]
        remove_field => ["flaskdate"]
    }
  }
}

output {
  elasticsearch { host => "elasticsearch" }
  stdout { codec => rubydebug }
}
